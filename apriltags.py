# Created by Alex Pereira

# Import Libraries
import cv2   as cv
import numpy as np
import collections
from   apriltag import apriltag as at

# Creates the Detector Class
class Detector:
    def __init__(self) -> None:
        """
        Constructor for the Detector class.
        """
        # Creates an apriltag detector
        self.detector = at.Detector("tag16h5")

        # The size of the tag in meters
        self.tag_size = 6 #not correct

    def detectTags(self, stream, camera_matrix, vizualization = 0, verbose = 0, annotate = False):
        """
        Detects AprilTags in a stream.
        @param stream: A stream generated by reading a VideoCapture
        @param camera_matrix: The camera's calibration matrix
        @param vizualization [int]: 0 - Highlight, 1 - Highlight + Boxes, 2 - Highlight + Axes, 3 - Highlight + Boxes + Axes
        @param verbose [int]: 0 - Silent, 1 - Number of detections, 2 - Detection data, 3 - Detection and pose data
        @param annotate [bool]: Render annotated text on detection window
        @return detectionResult, image
        """
        # If the stream is not grayscale, convert to grayscale
        if (len(stream.shape) == 3):
            gray = cv.cvtColor(stream, cv.COLOR_RGB2GRAY)
        else:
            gray = stream

        # Detect apriltags and return original image
        detections, dimg = self.detector.detect(gray, return_image = True)

        # 
        if (len(stream.shape) == 3):
            img = stream // 2 + dimg[:, :, None] // 2
        else:
            img = gray // 2 + dimg // 2

        # If verbose enabled, prints number of tags detected
        num_detections = len(detections)
        if (verbose == 1) or (verbose == 2) or (verbose == 3):
            print("Detected {} tags\n".format(num_detections))

        # 
        result = []
        np.set_printoptions(suppress = True, formatter = {"float_kind":"{:0.4f}".format})

        # Loops through availale detections
        for i, detection in enumerate(detections):
            # Prints debug info
            if (verbose == 2) or (verbose == 3):
                print( "Detection {} of {}:".format(i+1, num_detections))
                print()
                print(detection.tostring(indent = 2))

            # Detects the AprilTag's 3d pose
            pose, e0, e1 = self.detector.detection_pose(detection, camera_matrix)

            # Draws varying levels of information onto the image
            if (vizualization == 1):
                self.draw_pose_box(img, camera_matrix, pose)
            elif (vizualization == 2):
                self.draw_pose_axes(img, camera_matrix, pose, detection.center)
            elif (vizualization == 3):
                self.draw_pose_box(img, camera_matrix, pose)
                self.draw_pose_axes(img, camera_matrix, pose, detection.center)

            # Annotates the image
            if (annotate == True):
                self.annotate_detection(img, detection)

            # Prints the Pose and calulated error
            if (verbose == 3):
                print(detection.tostring(collections.OrderedDict([("Pose", pose),
                                                                  ("InitError", e0),
                                                                  ("FinalError", e1)]),
                                                                  indent = 2))
                print()

            # Adds results to the array
            result.extend([detection, pose, e0, e1])

        return result, img

    def draw_pose_box(self, img, camera_matrix, pose, z_sign = 1):
        """
        Draws the 3d pose box around the AprilTag.
        @param img: The image to write on
        @param camera_matrix: The camera's calibration matrix
        @param pose: The 3d pose of the tag
        @param z_sign: The direction of the z-axis
        """
        # Creates object points
        opoints = np.array([
            -1, -1, 0,
            1, -1, 0,
            1,  1, 0,
            -1,  1, 0,
            -1, -1, -2 * z_sign,
            1, -1, -2 * z_sign,
            1,  1, -2 * z_sign,
            -1,  1, -2 * z_sign,
        ]).reshape(-1, 1, 3) * 0.5 * self.tag_size

        # Creates edges
        edges = np.array([
            0, 1,
            1, 2,
            2, 3,
            3, 0,
            0, 4,
            1, 5,
            2, 6,
            3, 7,
            4, 5,
            5, 6,
            6, 7,
            7, 4
        ]).reshape(-1, 2)

        # Locaizes the camera matrix
        matrix = camera_matrix

        # Calulcates rotation and translation vectors for each AprilTag
        rvec, _ = cv.Rodrigues(pose[:3,:3])
        tvec = pose[:3, 3]

        # Derivative coefficients
        dcoeffs = np.zeros(5)

        # Calulate image points of each AprilTag
        ipoints, _ = cv.projectPoints(opoints, rvec, tvec, matrix, dcoeffs)
        ipoints = np.round(ipoints).astype(int)
        ipoints = [tuple(pt) for pt in ipoints.reshape(-1, 2)]

        # Draws lines between all the edges
        for i, j in edges:
            cv.line(img, ipoints[i], ipoints[j], (0, 255, 0), 1, 16)

    def draw_pose_axes(self, img, camera_matrix, pose, center):
        """
        Draws the colored pose axes around the AprilTag.
        @param img: The image to write on
        @param camera_matrix: The camera's calibration matrix
        @param pose: The 3d pose of the tag
        @param center: The center of the AprilTag
        """
        # Localizes the camera matrix
        matrix = camera_matrix

        # Calulcates rotation and translation vectors for each AprilTag
        rvec, _ = cv.Rodrigues(pose[:3,:3])
        tvec = pose[:3, 3]

        # Derivative coefficients
        dcoeffs = np.zeros(5)

        # Calculate object points of each AprilTag
        opoints = np.float32([[1, 0, 0],
                              [0, -1, 0],
                              [0, 0, -1]]).reshape(-1, 3) * self.tag_size

        # Calulate image points of each AprilTag
        ipoints, _ = cv.projectPoints(opoints, rvec, tvec, matrix, dcoeffs)
        ipoints = np.round(ipoints).astype(int)

        # Calulates the center
        center = np.round(center).astype(int)
        center = tuple(center.ravel())

        # Draws the 3d pose lines
        cv.line(img, center, tuple(ipoints[0].ravel()), (0,0,255), 2)
        cv.line(img, center, tuple(ipoints[1].ravel()), (0,255,0), 2)
        cv.line(img, center, tuple(ipoints[2].ravel()), (255,0,0), 2)

    def annotate_detection(sself, img, detection):
        """
        Annotates the image with coordinates.
        @param img: The image to write on
        @param detection: A detected AprilTag in the image
        """
        # Sets font
        font = cv.FONT_HERSHEY_SIMPLEX

        # Gets the tag properties
        text = str(detection.tag_id)
        tag_center = [detection.center[0], detection.center[1]]

        # Calulates the inner tag size
        tag_size_px = np.sqrt((detection.corners[1][0] - detection.corners[0][0]) ** 2 + (detection.corners[1][1] - detection.corners[0][1]) ** 2)

        # Gets font and text size
        font_size = tag_size_px / 22
        text_size = cv.getTextSize(text, font, font_size, 2)[0]

        # Gets the text position
        text_x = int(tag_center[0] - text_size[0] / 2)
        text_y = int(tag_center[1] + text_size[1] / 2)

        # Writes the text to the image
        cv.putText(img, text, (text_x, text_y), font, font_size, (0, 255, 255), 2)